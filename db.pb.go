// Code generated by protoc-gen-go.
// source: db.proto
// DO NOT EDIT!

/*
Package remote is a generated protocol buffer package.

It is generated from these files:
	db.proto

It has these top-level messages:
	PutRequest
	GetResponse
	GetRequest
	BucketRequest
	BucketResponse
	BeginTransactionRequest
	Empty
	ContextHeader
	PingResponse
	TxStatsResponse
	DBStatsResponse
	Time
*/
package remote

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
const _ = proto.ProtoPackageIsVersion1

type PutRequest struct {
	Ctx *ContextHeader `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	Key string         `protobuf:"bytes,2,opt,name=key" json:"key,omitempty"`
	Val string         `protobuf:"bytes,3,opt,name=val" json:"val,omitempty"`
}

func (m *PutRequest) Reset()                    { *m = PutRequest{} }
func (m *PutRequest) String() string            { return proto.CompactTextString(m) }
func (*PutRequest) ProtoMessage()               {}
func (*PutRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *PutRequest) GetCtx() *ContextHeader {
	if m != nil {
		return m.Ctx
	}
	return nil
}

type GetResponse struct {
	Ctx *ContextHeader `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	Val string         `protobuf:"bytes,2,opt,name=val" json:"val,omitempty"`
}

func (m *GetResponse) Reset()                    { *m = GetResponse{} }
func (m *GetResponse) String() string            { return proto.CompactTextString(m) }
func (*GetResponse) ProtoMessage()               {}
func (*GetResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *GetResponse) GetCtx() *ContextHeader {
	if m != nil {
		return m.Ctx
	}
	return nil
}

type GetRequest struct {
	Ctx *ContextHeader `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	Key string         `protobuf:"bytes,2,opt,name=key" json:"key,omitempty"`
}

func (m *GetRequest) Reset()                    { *m = GetRequest{} }
func (m *GetRequest) String() string            { return proto.CompactTextString(m) }
func (*GetRequest) ProtoMessage()               {}
func (*GetRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *GetRequest) GetCtx() *ContextHeader {
	if m != nil {
		return m.Ctx
	}
	return nil
}

type BucketRequest struct {
	Ctx *ContextHeader `protobuf:"bytes,1,opt,name=ctx" json:"ctx,omitempty"`
	Key string         `protobuf:"bytes,2,opt,name=key" json:"key,omitempty"`
}

func (m *BucketRequest) Reset()                    { *m = BucketRequest{} }
func (m *BucketRequest) String() string            { return proto.CompactTextString(m) }
func (*BucketRequest) ProtoMessage()               {}
func (*BucketRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *BucketRequest) GetCtx() *ContextHeader {
	if m != nil {
		return m.Ctx
	}
	return nil
}

type BucketResponse struct {
	BucketID uint64         `protobuf:"varint,1,opt,name=bucketID" json:"bucketID,omitempty"`
	Ctx      *ContextHeader `protobuf:"bytes,2,opt,name=ctx" json:"ctx,omitempty"`
}

func (m *BucketResponse) Reset()                    { *m = BucketResponse{} }
func (m *BucketResponse) String() string            { return proto.CompactTextString(m) }
func (*BucketResponse) ProtoMessage()               {}
func (*BucketResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *BucketResponse) GetCtx() *ContextHeader {
	if m != nil {
		return m.Ctx
	}
	return nil
}

type BeginTransactionRequest struct {
	Writable bool `protobuf:"varint,1,opt,name=writable" json:"writable,omitempty"`
}

func (m *BeginTransactionRequest) Reset()                    { *m = BeginTransactionRequest{} }
func (m *BeginTransactionRequest) String() string            { return proto.CompactTextString(m) }
func (*BeginTransactionRequest) ProtoMessage()               {}
func (*BeginTransactionRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

type Empty struct {
}

func (m *Empty) Reset()                    { *m = Empty{} }
func (m *Empty) String() string            { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()               {}
func (*Empty) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

type ContextHeader struct {
	Id       uint64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	ParentID uint64 `protobuf:"varint,2,opt,name=parentID" json:"parentID,omitempty"`
}

func (m *ContextHeader) Reset()                    { *m = ContextHeader{} }
func (m *ContextHeader) String() string            { return proto.CompactTextString(m) }
func (*ContextHeader) ProtoMessage()               {}
func (*ContextHeader) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

type PingResponse struct {
	Received *Time `protobuf:"bytes,1,opt,name=received" json:"received,omitempty"`
}

func (m *PingResponse) Reset()                    { *m = PingResponse{} }
func (m *PingResponse) String() string            { return proto.CompactTextString(m) }
func (*PingResponse) ProtoMessage()               {}
func (*PingResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *PingResponse) GetReceived() *Time {
	if m != nil {
		return m.Received
	}
	return nil
}

type TxStatsResponse struct {
	PageCount   int64 `protobuf:"varint,1,opt,name=PageCount,json=pageCount" json:"PageCount,omitempty"`
	PageAlloc   int64 `protobuf:"varint,2,opt,name=PageAlloc,json=pageAlloc" json:"PageAlloc,omitempty"`
	CursorCount int64 `protobuf:"varint,3,opt,name=CursorCount,json=cursorCount" json:"CursorCount,omitempty"`
	NodeCount   int64 `protobuf:"varint,4,opt,name=NodeCount,json=nodeCount" json:"NodeCount,omitempty"`
	NodeDeref   int64 `protobuf:"varint,5,opt,name=NodeDeref,json=nodeDeref" json:"NodeDeref,omitempty"`
	Rebalance   int64 `protobuf:"varint,6,opt,name=Rebalance,json=rebalance" json:"Rebalance,omitempty"`
	Split       int64 `protobuf:"varint,7,opt,name=Split,json=split" json:"Split,omitempty"`
	Spill       int64 `protobuf:"varint,8,opt,name=Spill,json=spill" json:"Spill,omitempty"`
	SpillTime   int64 `protobuf:"varint,9,opt,name=SpillTime,json=spillTime" json:"SpillTime,omitempty"`
	Write       int64 `protobuf:"varint,10,opt,name=Write,json=write" json:"Write,omitempty"`
	WriteTime   int64 `protobuf:"varint,11,opt,name=WriteTime,json=writeTime" json:"WriteTime,omitempty"`
}

func (m *TxStatsResponse) Reset()                    { *m = TxStatsResponse{} }
func (m *TxStatsResponse) String() string            { return proto.CompactTextString(m) }
func (*TxStatsResponse) ProtoMessage()               {}
func (*TxStatsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

type DBStatsResponse struct {
	FreePageN     int64            `protobuf:"varint,1,opt,name=FreePageN,json=freePageN" json:"FreePageN,omitempty"`
	PendingPageN  int64            `protobuf:"varint,2,opt,name=PendingPageN,json=pendingPageN" json:"PendingPageN,omitempty"`
	FreeAlloc     int64            `protobuf:"varint,3,opt,name=FreeAlloc,json=freeAlloc" json:"FreeAlloc,omitempty"`
	FreelistInuse int64            `protobuf:"varint,4,opt,name=FreelistInuse,json=freelistInuse" json:"FreelistInuse,omitempty"`
	TxN           int64            `protobuf:"varint,5,opt,name=TxN,json=txN" json:"TxN,omitempty"`
	OpenTxN       int64            `protobuf:"varint,6,opt,name=OpenTxN,json=openTxN" json:"OpenTxN,omitempty"`
	TxStats       *TxStatsResponse `protobuf:"bytes,8,opt,name=TxStats,json=txStats" json:"TxStats,omitempty"`
}

func (m *DBStatsResponse) Reset()                    { *m = DBStatsResponse{} }
func (m *DBStatsResponse) String() string            { return proto.CompactTextString(m) }
func (*DBStatsResponse) ProtoMessage()               {}
func (*DBStatsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *DBStatsResponse) GetTxStats() *TxStatsResponse {
	if m != nil {
		return m.TxStats
	}
	return nil
}

type Time struct {
	Seconds  int64 `protobuf:"varint,1,opt,name=seconds" json:"seconds,omitempty"`
	Nseconds int32 `protobuf:"varint,2,opt,name=nseconds" json:"nseconds,omitempty"`
}

func (m *Time) Reset()                    { *m = Time{} }
func (m *Time) String() string            { return proto.CompactTextString(m) }
func (*Time) ProtoMessage()               {}
func (*Time) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func init() {
	proto.RegisterType((*PutRequest)(nil), "remote.PutRequest")
	proto.RegisterType((*GetResponse)(nil), "remote.GetResponse")
	proto.RegisterType((*GetRequest)(nil), "remote.GetRequest")
	proto.RegisterType((*BucketRequest)(nil), "remote.BucketRequest")
	proto.RegisterType((*BucketResponse)(nil), "remote.BucketResponse")
	proto.RegisterType((*BeginTransactionRequest)(nil), "remote.BeginTransactionRequest")
	proto.RegisterType((*Empty)(nil), "remote.Empty")
	proto.RegisterType((*ContextHeader)(nil), "remote.ContextHeader")
	proto.RegisterType((*PingResponse)(nil), "remote.PingResponse")
	proto.RegisterType((*TxStatsResponse)(nil), "remote.TxStatsResponse")
	proto.RegisterType((*DBStatsResponse)(nil), "remote.DBStatsResponse")
	proto.RegisterType((*Time)(nil), "remote.Time")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion2

// Client API for DBServer service

type DBServerClient interface {
	Ping(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*PingResponse, error)
	DBStats(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*DBStatsResponse, error)
	BeginTransaction(ctx context.Context, in *BeginTransactionRequest, opts ...grpc.CallOption) (*ContextHeader, error)
	CommitTransaction(ctx context.Context, in *ContextHeader, opts ...grpc.CallOption) (*Empty, error)
	RollbackTransaction(ctx context.Context, in *ContextHeader, opts ...grpc.CallOption) (*Empty, error)
	Bucket(ctx context.Context, in *BucketRequest, opts ...grpc.CallOption) (*BucketResponse, error)
	CreateBucket(ctx context.Context, in *BucketRequest, opts ...grpc.CallOption) (*BucketResponse, error)
	CreateBucketIfNotExists(ctx context.Context, in *BucketRequest, opts ...grpc.CallOption) (*BucketResponse, error)
	DeleteBucket(ctx context.Context, in *BucketRequest, opts ...grpc.CallOption) (*Empty, error)
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error)
	Put(ctx context.Context, in *PutRequest, opts ...grpc.CallOption) (*Empty, error)
}

type dBServerClient struct {
	cc *grpc.ClientConn
}

func NewDBServerClient(cc *grpc.ClientConn) DBServerClient {
	return &dBServerClient{cc}
}

func (c *dBServerClient) Ping(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*PingResponse, error) {
	out := new(PingResponse)
	err := grpc.Invoke(ctx, "/remote.DBServer/Ping", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dBServerClient) DBStats(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*DBStatsResponse, error) {
	out := new(DBStatsResponse)
	err := grpc.Invoke(ctx, "/remote.DBServer/DBStats", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dBServerClient) BeginTransaction(ctx context.Context, in *BeginTransactionRequest, opts ...grpc.CallOption) (*ContextHeader, error) {
	out := new(ContextHeader)
	err := grpc.Invoke(ctx, "/remote.DBServer/BeginTransaction", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dBServerClient) CommitTransaction(ctx context.Context, in *ContextHeader, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/remote.DBServer/CommitTransaction", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dBServerClient) RollbackTransaction(ctx context.Context, in *ContextHeader, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/remote.DBServer/RollbackTransaction", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dBServerClient) Bucket(ctx context.Context, in *BucketRequest, opts ...grpc.CallOption) (*BucketResponse, error) {
	out := new(BucketResponse)
	err := grpc.Invoke(ctx, "/remote.DBServer/Bucket", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dBServerClient) CreateBucket(ctx context.Context, in *BucketRequest, opts ...grpc.CallOption) (*BucketResponse, error) {
	out := new(BucketResponse)
	err := grpc.Invoke(ctx, "/remote.DBServer/CreateBucket", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dBServerClient) CreateBucketIfNotExists(ctx context.Context, in *BucketRequest, opts ...grpc.CallOption) (*BucketResponse, error) {
	out := new(BucketResponse)
	err := grpc.Invoke(ctx, "/remote.DBServer/CreateBucketIfNotExists", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dBServerClient) DeleteBucket(ctx context.Context, in *BucketRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/remote.DBServer/DeleteBucket", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dBServerClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error) {
	out := new(GetResponse)
	err := grpc.Invoke(ctx, "/remote.DBServer/Get", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dBServerClient) Put(ctx context.Context, in *PutRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/remote.DBServer/Put", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for DBServer service

type DBServerServer interface {
	Ping(context.Context, *Empty) (*PingResponse, error)
	DBStats(context.Context, *Empty) (*DBStatsResponse, error)
	BeginTransaction(context.Context, *BeginTransactionRequest) (*ContextHeader, error)
	CommitTransaction(context.Context, *ContextHeader) (*Empty, error)
	RollbackTransaction(context.Context, *ContextHeader) (*Empty, error)
	Bucket(context.Context, *BucketRequest) (*BucketResponse, error)
	CreateBucket(context.Context, *BucketRequest) (*BucketResponse, error)
	CreateBucketIfNotExists(context.Context, *BucketRequest) (*BucketResponse, error)
	DeleteBucket(context.Context, *BucketRequest) (*Empty, error)
	Get(context.Context, *GetRequest) (*GetResponse, error)
	Put(context.Context, *PutRequest) (*Empty, error)
}

func RegisterDBServerServer(s *grpc.Server, srv DBServerServer) {
	s.RegisterService(&_DBServer_serviceDesc, srv)
}

func _DBServer_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DBServerServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/remote.DBServer/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DBServerServer).Ping(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _DBServer_DBStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DBServerServer).DBStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/remote.DBServer/DBStats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DBServerServer).DBStats(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _DBServer_BeginTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BeginTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DBServerServer).BeginTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/remote.DBServer/BeginTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DBServerServer).BeginTransaction(ctx, req.(*BeginTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DBServer_CommitTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContextHeader)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DBServerServer).CommitTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/remote.DBServer/CommitTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DBServerServer).CommitTransaction(ctx, req.(*ContextHeader))
	}
	return interceptor(ctx, in, info, handler)
}

func _DBServer_RollbackTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContextHeader)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DBServerServer).RollbackTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/remote.DBServer/RollbackTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DBServerServer).RollbackTransaction(ctx, req.(*ContextHeader))
	}
	return interceptor(ctx, in, info, handler)
}

func _DBServer_Bucket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BucketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DBServerServer).Bucket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/remote.DBServer/Bucket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DBServerServer).Bucket(ctx, req.(*BucketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DBServer_CreateBucket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BucketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DBServerServer).CreateBucket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/remote.DBServer/CreateBucket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DBServerServer).CreateBucket(ctx, req.(*BucketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DBServer_CreateBucketIfNotExists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BucketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DBServerServer).CreateBucketIfNotExists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/remote.DBServer/CreateBucketIfNotExists",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DBServerServer).CreateBucketIfNotExists(ctx, req.(*BucketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DBServer_DeleteBucket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BucketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DBServerServer).DeleteBucket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/remote.DBServer/DeleteBucket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DBServerServer).DeleteBucket(ctx, req.(*BucketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DBServer_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DBServerServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/remote.DBServer/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DBServerServer).Get(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DBServer_Put_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DBServerServer).Put(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/remote.DBServer/Put",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DBServerServer).Put(ctx, req.(*PutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _DBServer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "remote.DBServer",
	HandlerType: (*DBServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _DBServer_Ping_Handler,
		},
		{
			MethodName: "DBStats",
			Handler:    _DBServer_DBStats_Handler,
		},
		{
			MethodName: "BeginTransaction",
			Handler:    _DBServer_BeginTransaction_Handler,
		},
		{
			MethodName: "CommitTransaction",
			Handler:    _DBServer_CommitTransaction_Handler,
		},
		{
			MethodName: "RollbackTransaction",
			Handler:    _DBServer_RollbackTransaction_Handler,
		},
		{
			MethodName: "Bucket",
			Handler:    _DBServer_Bucket_Handler,
		},
		{
			MethodName: "CreateBucket",
			Handler:    _DBServer_CreateBucket_Handler,
		},
		{
			MethodName: "CreateBucketIfNotExists",
			Handler:    _DBServer_CreateBucketIfNotExists_Handler,
		},
		{
			MethodName: "DeleteBucket",
			Handler:    _DBServer_DeleteBucket_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _DBServer_Get_Handler,
		},
		{
			MethodName: "Put",
			Handler:    _DBServer_Put_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}

var fileDescriptor0 = []byte{
	// 727 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xac, 0x55, 0x5d, 0x6f, 0xd3, 0x4a,
	0x10, 0x55, 0xe3, 0x7c, 0x4e, 0x92, 0xb6, 0x77, 0xdb, 0x7b, 0x6b, 0x45, 0x57, 0xba, 0x95, 0x75,
	0x25, 0x2a, 0x21, 0x45, 0xa2, 0x80, 0x00, 0x15, 0x1e, 0x68, 0x52, 0xfa, 0xf1, 0x10, 0x2a, 0x37,
	0x08, 0xf1, 0xe8, 0x38, 0x93, 0xca, 0xaa, 0xb3, 0x6b, 0xd6, 0x9b, 0x36, 0x7d, 0xe3, 0xdf, 0xf1,
	0x8f, 0x78, 0x66, 0x3f, 0xbc, 0x76, 0x12, 0x8a, 0xaa, 0x02, 0x6f, 0x9e, 0x33, 0x73, 0xce, 0xce,
	0x9e, 0x9d, 0xf5, 0x42, 0x7d, 0x3c, 0xea, 0x26, 0x9c, 0x09, 0x46, 0xaa, 0x1c, 0xa7, 0x4c, 0xa0,
	0xf7, 0x09, 0xe0, 0x7c, 0x26, 0x7c, 0xfc, 0x3c, 0xc3, 0x54, 0x90, 0x47, 0xe0, 0x84, 0x62, 0xee,
	0xae, 0xed, 0xae, 0xed, 0x35, 0xf7, 0xff, 0xee, 0x9a, 0x9a, 0x6e, 0x8f, 0x51, 0x81, 0x73, 0x71,
	0x82, 0xc1, 0x18, 0xb9, 0xaf, 0x2a, 0xc8, 0x26, 0x38, 0x57, 0x78, 0xeb, 0x96, 0x64, 0x61, 0xc3,
	0x57, 0x9f, 0x0a, 0xb9, 0x0e, 0x62, 0xd7, 0x31, 0x88, 0xfc, 0xf4, 0x4e, 0xa0, 0x79, 0x8c, 0x52,
	0x3a, 0x4d, 0x18, 0x4d, 0xf1, 0x41, 0xda, 0x4a, 0xa9, 0x54, 0x28, 0x1d, 0x03, 0x68, 0xa5, 0xdf,
	0x6d, 0xd2, 0x3b, 0x83, 0xf6, 0xe1, 0x2c, 0xbc, 0xfa, 0x23, 0x5a, 0x1f, 0x60, 0xdd, 0x6a, 0x65,
	0x3b, 0xec, 0x40, 0x7d, 0xa4, 0x91, 0xd3, 0xbe, 0x56, 0x2c, 0xfb, 0x79, 0x6c, 0x17, 0x2a, 0xdd,
	0xb7, 0x90, 0xf7, 0x1c, 0x76, 0x0e, 0xf1, 0x32, 0xa2, 0x43, 0x1e, 0xd0, 0x34, 0x08, 0x45, 0xc4,
	0xa8, 0x6d, 0x56, 0xea, 0xdf, 0xf0, 0x48, 0x04, 0xa3, 0x18, 0xb5, 0x7e, 0xdd, 0xcf, 0x63, 0xaf,
	0x06, 0x95, 0xa3, 0x69, 0x22, 0x6e, 0xbd, 0x03, 0x68, 0x2f, 0xa9, 0x92, 0x75, 0x28, 0x45, 0xe3,
	0xac, 0x1f, 0xf9, 0xa5, 0x54, 0x92, 0x80, 0x23, 0x55, 0x5d, 0x96, 0x4c, 0x97, 0x36, 0xf6, 0x5e,
	0x42, 0xeb, 0x3c, 0xa2, 0x97, 0xf9, 0x8e, 0xf6, 0xa0, 0xce, 0x31, 0xc4, 0xe8, 0x1a, 0xc7, 0x99,
	0x47, 0x2d, 0xdb, 0xfa, 0x30, 0x9a, 0xa2, 0x9f, 0x67, 0xbd, 0xaf, 0x25, 0xd8, 0x18, 0xce, 0x2f,
	0x44, 0x20, 0xd2, 0x9c, 0xfd, 0x2f, 0x34, 0xce, 0x83, 0x4b, 0xec, 0xb1, 0x19, 0x15, 0x9a, 0xee,
	0xf8, 0x8d, 0xc4, 0x02, 0x36, 0xfb, 0x36, 0x8e, 0x59, 0xa8, 0x1b, 0xc9, 0xb2, 0x1a, 0x20, 0xbb,
	0xd0, 0xec, 0xcd, 0x78, 0xca, 0xb8, 0x61, 0x3b, 0x3a, 0xdf, 0x0c, 0x0b, 0x48, 0xf1, 0x07, 0x6c,
	0x9c, 0xa9, 0x97, 0x0d, 0x9f, 0x5a, 0xc0, 0x66, 0xfb, 0xc8, 0x71, 0xe2, 0x56, 0x8a, 0xac, 0x06,
	0x54, 0xd6, 0xc7, 0x51, 0x10, 0x07, 0x34, 0x44, 0xb7, 0x6a, 0xb2, 0xdc, 0x02, 0x64, 0x1b, 0x2a,
	0x17, 0x49, 0x1c, 0x09, 0xb7, 0xa6, 0x33, 0x95, 0x54, 0x05, 0x06, 0x8d, 0xe2, 0xd8, 0xad, 0x5b,
	0x54, 0x06, 0x4a, 0x49, 0xa3, 0xca, 0x0e, 0xb7, 0x61, 0x94, 0x52, 0x0b, 0x28, 0xce, 0x47, 0x79,
	0x42, 0xe8, 0x82, 0xe1, 0xa8, 0xe3, 0xd2, 0xbe, 0x68, 0x54, 0x73, 0x9a, 0x86, 0x73, 0x63, 0x01,
	0xef, 0xdb, 0x1a, 0x6c, 0xf4, 0x0f, 0x7f, 0x70, 0xf2, 0x1d, 0x47, 0x54, 0x7e, 0x0d, 0xac, 0x93,
	0x13, 0x0b, 0x10, 0x4f, 0x9e, 0x1a, 0xd2, 0xb1, 0x3c, 0x38, 0x53, 0x60, 0xcc, 0x6c, 0x25, 0x0b,
	0x98, 0x55, 0x30, 0x6e, 0x3b, 0x85, 0x82, 0x71, 0xfb, 0x7f, 0x68, 0xab, 0x6c, 0x1c, 0xa5, 0xe2,
	0x94, 0xce, 0x52, 0xcc, 0xfc, 0x6c, 0x4f, 0x16, 0x41, 0x75, 0x07, 0x86, 0xf3, 0x41, 0xe6, 0xa6,
	0x23, 0xe6, 0x03, 0xe2, 0x42, 0xed, 0xbd, 0x5c, 0x46, 0xa1, 0xc6, 0xc5, 0x1a, 0x33, 0x21, 0x79,
	0x02, 0xb5, 0x6c, 0x1c, 0xb4, 0x5f, 0xcd, 0xfd, 0x9d, 0x7c, 0x70, 0x96, 0xa7, 0xc4, 0xaf, 0x09,
	0x03, 0x78, 0xaf, 0xa1, 0xac, 0x4d, 0x93, 0xa2, 0x29, 0x86, 0x8c, 0x8e, 0xd3, 0x6c, 0xab, 0x36,
	0x54, 0xa3, 0x4b, 0x6d, 0x4a, 0x6d, 0xb2, 0xe2, 0xe7, 0xf1, 0xfe, 0x97, 0x0a, 0xd4, 0xa5, 0x6d,
	0xc8, 0xaf, 0xe5, 0xcc, 0x3f, 0x86, 0xb2, 0x9a, 0x63, 0xd2, 0xb6, 0x8b, 0xea, 0xbb, 0xd1, 0xd9,
	0xb6, 0xe1, 0xd2, 0x90, 0xcb, 0x56, 0x33, 0xbf, 0x57, 0xeb, 0xf3, 0x9e, 0x57, 0xcf, 0xe3, 0x0c,
	0x36, 0x57, 0x2f, 0x29, 0xf9, 0xcf, 0x16, 0xff, 0xe4, 0xfa, 0x76, 0xee, 0xbe, 0xf5, 0xe4, 0x15,
	0xfc, 0xd5, 0x63, 0xd3, 0x69, 0x24, 0x16, 0xc5, 0xee, 0xae, 0xed, 0x2c, 0xf7, 0x47, 0x0e, 0x60,
	0xcb, 0x67, 0x71, 0x3c, 0x0a, 0xc2, 0xab, 0x87, 0x93, 0x5f, 0x40, 0xd5, 0xfc, 0xbf, 0x8a, 0xfa,
	0xa5, 0x7f, 0x63, 0xe7, 0x9f, 0x55, 0x38, 0xdb, 0xfc, 0x1b, 0x68, 0xf5, 0x38, 0x06, 0x02, 0x7f,
	0x8d, 0x7e, 0x02, 0x3b, 0x8b, 0xf4, 0xd3, 0xc9, 0x80, 0x89, 0xa3, 0xb9, 0x1c, 0xb2, 0xf4, 0xa1,
	0x4a, 0xcf, 0xa0, 0xd5, 0xc7, 0x18, 0xef, 0x6b, 0x64, 0x65, 0xdf, 0x5d, 0x70, 0xe4, 0x63, 0x42,
	0x88, 0x45, 0x8b, 0x97, 0xa5, 0xb3, 0xb5, 0x84, 0xe5, 0xff, 0x40, 0x47, 0xbe, 0x90, 0x45, 0x7d,
	0xf1, 0x5c, 0xae, 0x28, 0x8f, 0xaa, 0xfa, 0x69, 0x7d, 0xfa, 0x3d, 0x00, 0x00, 0xff, 0xff, 0x1a,
	0xff, 0x18, 0xef, 0x66, 0x07, 0x00, 0x00,
}
