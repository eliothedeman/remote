// ************************************************************
// DO NOT EDIT.
// THIS FILE IS AUTO-GENERATED BY codecgen.
// ************************************************************

package remote

import (
	"errors"
	"fmt"
	pkg1_bolt "github.com/boltdb/bolt"
	codec1978 "github.com/ugorji/go/codec"
	"reflect"
	"runtime"
	sync "sync"
	time "time"
)

const (
	// ----- content types ----
	codecSelferC_UTF86482 = 1
	codecSelferC_RAW6482  = 0
	// ----- value types used ----
	codecSelferValueTypeArray6482 = 10
	codecSelferValueTypeMap6482   = 9
	// ----- containerStateValues ----
	codecSelfer_containerMapKey6482    = 2
	codecSelfer_containerMapValue6482  = 3
	codecSelfer_containerMapEnd6482    = 4
	codecSelfer_containerArrayElem6482 = 6
	codecSelfer_containerArrayEnd6482  = 7
)

var (
	codecSelferBitsize6482                         = uint8(reflect.TypeOf(uint(0)).Bits())
	codecSelferOnlyMapOrArrayEncodeToStructErr6482 = errors.New(`only encoded map or array can be decoded into a struct`)
)

type codecSelfer6482 struct{}

func init() {
	if codec1978.GenVersion != 5 {
		_, file, _, _ := runtime.Caller(0)
		err := fmt.Errorf("codecgen version mismatch: current: %v, need %v. Re-generate file: %v",
			5, codec1978.GenVersion, file)
		panic(err)
	}
	if false { // reference the types, but skip this branch at build/run time
		var v0 pkg1_bolt.Stats
		var v1 sync.RWMutex
		var v2 time.Time
		_, _, _ = v0, v1, v2
	}
}

func (x *Server) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer6482
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [0]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(0)
			} else {
				yynn2 = 0
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd6482)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd6482)
			}
		}
	}
}

func (x *Server) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer6482
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap6482 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd6482)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray6482 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd6482)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr6482)
		}
	}
}

func (x *Server) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer6482
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey6482)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue6482)
		switch yys3 {
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd6482)
}

func (x *Server) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer6482
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4 int
	var yyb4 bool
	var yyhl4 bool = l >= 0
	for {
		yyj4++
		if yyhl4 {
			yyb4 = yyj4 > l
		} else {
			yyb4 = r.CheckBreak()
		}
		if yyb4 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem6482)
		z.DecStructFieldNotFound(yyj4-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd6482)
}

func (x *Context) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer6482
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [0]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(0)
			} else {
				yynn2 = 0
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd6482)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd6482)
			}
		}
	}
}

func (x *Context) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer6482
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap6482 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd6482)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray6482 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd6482)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr6482)
		}
	}
}

func (x *Context) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer6482
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey6482)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue6482)
		switch yys3 {
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd6482)
}

func (x *Context) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer6482
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4 int
	var yyb4 bool
	var yyhl4 bool = l >= 0
	for {
		yyj4++
		if yyhl4 {
			yyb4 = yyj4 > l
		} else {
			yyb4 = r.CheckBreak()
		}
		if yyb4 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem6482)
		z.DecStructFieldNotFound(yyj4-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd6482)
}

func (x *PingRequest) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer6482
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [1]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(1)
			} else {
				yynn2 = 1
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem6482)
				yy4 := &x.T
				yym5 := z.EncBinary()
				_ = yym5
				if false {
				} else if yym6 := z.TimeRtidIfBinc(); yym6 != 0 {
					r.EncodeBuiltin(yym6, yy4)
				} else if z.HasExtensions() && z.EncExt(yy4) {
				} else if yym5 {
					z.EncBinaryMarshal(yy4)
				} else if !yym5 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy4)
				} else {
					z.EncFallback(yy4)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey6482)
				r.EncodeString(codecSelferC_UTF86482, string("T"))
				z.EncSendContainerState(codecSelfer_containerMapValue6482)
				yy7 := &x.T
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else if yym9 := z.TimeRtidIfBinc(); yym9 != 0 {
					r.EncodeBuiltin(yym9, yy7)
				} else if z.HasExtensions() && z.EncExt(yy7) {
				} else if yym8 {
					z.EncBinaryMarshal(yy7)
				} else if !yym8 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy7)
				} else {
					z.EncFallback(yy7)
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd6482)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd6482)
			}
		}
	}
}

func (x *PingRequest) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer6482
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap6482 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd6482)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray6482 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd6482)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr6482)
		}
	}
}

func (x *PingRequest) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer6482
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey6482)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue6482)
		switch yys3 {
		case "T":
			if r.TryDecodeAsNil() {
				x.T = time.Time{}
			} else {
				yyv4 := &x.T
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else if yym6 := z.TimeRtidIfBinc(); yym6 != 0 {
					r.DecodeBuiltin(yym6, yyv4)
				} else if z.HasExtensions() && z.DecExt(yyv4) {
				} else if yym5 {
					z.DecBinaryUnmarshal(yyv4)
				} else if !yym5 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv4)
				} else {
					z.DecFallback(yyv4, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd6482)
}

func (x *PingRequest) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer6482
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj7 int
	var yyb7 bool
	var yyhl7 bool = l >= 0
	yyj7++
	if yyhl7 {
		yyb7 = yyj7 > l
	} else {
		yyb7 = r.CheckBreak()
	}
	if yyb7 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd6482)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem6482)
	if r.TryDecodeAsNil() {
		x.T = time.Time{}
	} else {
		yyv8 := &x.T
		yym9 := z.DecBinary()
		_ = yym9
		if false {
		} else if yym10 := z.TimeRtidIfBinc(); yym10 != 0 {
			r.DecodeBuiltin(yym10, yyv8)
		} else if z.HasExtensions() && z.DecExt(yyv8) {
		} else if yym9 {
			z.DecBinaryUnmarshal(yyv8)
		} else if !yym9 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv8)
		} else {
			z.DecFallback(yyv8, false)
		}
	}
	for {
		yyj7++
		if yyhl7 {
			yyb7 = yyj7 > l
		} else {
			yyb7 = r.CheckBreak()
		}
		if yyb7 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem6482)
		z.DecStructFieldNotFound(yyj7-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd6482)
}

func (x *PingResponse) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer6482
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [2]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(2)
			} else {
				yynn2 = 2
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem6482)
				yym4 := z.EncBinary()
				_ = yym4
				if false {
				} else if z.HasExtensions() && z.EncExt(x.To) {
				} else {
					r.EncodeInt(int64(x.To))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey6482)
				r.EncodeString(codecSelferC_UTF86482, string("To"))
				z.EncSendContainerState(codecSelfer_containerMapValue6482)
				yym5 := z.EncBinary()
				_ = yym5
				if false {
				} else if z.HasExtensions() && z.EncExt(x.To) {
				} else {
					r.EncodeInt(int64(x.To))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem6482)
				yy7 := &x.From
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else if yym9 := z.TimeRtidIfBinc(); yym9 != 0 {
					r.EncodeBuiltin(yym9, yy7)
				} else if z.HasExtensions() && z.EncExt(yy7) {
				} else if yym8 {
					z.EncBinaryMarshal(yy7)
				} else if !yym8 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy7)
				} else {
					z.EncFallback(yy7)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey6482)
				r.EncodeString(codecSelferC_UTF86482, string("From"))
				z.EncSendContainerState(codecSelfer_containerMapValue6482)
				yy10 := &x.From
				yym11 := z.EncBinary()
				_ = yym11
				if false {
				} else if yym12 := z.TimeRtidIfBinc(); yym12 != 0 {
					r.EncodeBuiltin(yym12, yy10)
				} else if z.HasExtensions() && z.EncExt(yy10) {
				} else if yym11 {
					z.EncBinaryMarshal(yy10)
				} else if !yym11 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy10)
				} else {
					z.EncFallback(yy10)
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd6482)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd6482)
			}
		}
	}
}

func (x *PingResponse) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer6482
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap6482 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd6482)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray6482 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd6482)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr6482)
		}
	}
}

func (x *PingResponse) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer6482
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey6482)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue6482)
		switch yys3 {
		case "To":
			if r.TryDecodeAsNil() {
				x.To = 0
			} else {
				yyv4 := &x.To
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4) {
				} else {
					*((*int64)(yyv4)) = int64(r.DecodeInt(64))
				}
			}
		case "From":
			if r.TryDecodeAsNil() {
				x.From = time.Time{}
			} else {
				yyv6 := &x.From
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else if yym8 := z.TimeRtidIfBinc(); yym8 != 0 {
					r.DecodeBuiltin(yym8, yyv6)
				} else if z.HasExtensions() && z.DecExt(yyv6) {
				} else if yym7 {
					z.DecBinaryUnmarshal(yyv6)
				} else if !yym7 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv6)
				} else {
					z.DecFallback(yyv6, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd6482)
}

func (x *PingResponse) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer6482
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj9 int
	var yyb9 bool
	var yyhl9 bool = l >= 0
	yyj9++
	if yyhl9 {
		yyb9 = yyj9 > l
	} else {
		yyb9 = r.CheckBreak()
	}
	if yyb9 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd6482)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem6482)
	if r.TryDecodeAsNil() {
		x.To = 0
	} else {
		yyv10 := &x.To
		yym11 := z.DecBinary()
		_ = yym11
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv10) {
		} else {
			*((*int64)(yyv10)) = int64(r.DecodeInt(64))
		}
	}
	yyj9++
	if yyhl9 {
		yyb9 = yyj9 > l
	} else {
		yyb9 = r.CheckBreak()
	}
	if yyb9 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd6482)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem6482)
	if r.TryDecodeAsNil() {
		x.From = time.Time{}
	} else {
		yyv12 := &x.From
		yym13 := z.DecBinary()
		_ = yym13
		if false {
		} else if yym14 := z.TimeRtidIfBinc(); yym14 != 0 {
			r.DecodeBuiltin(yym14, yyv12)
		} else if z.HasExtensions() && z.DecExt(yyv12) {
		} else if yym13 {
			z.DecBinaryUnmarshal(yyv12)
		} else if !yym13 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv12)
		} else {
			z.DecFallback(yyv12, false)
		}
	}
	for {
		yyj9++
		if yyhl9 {
			yyb9 = yyj9 > l
		} else {
			yyb9 = r.CheckBreak()
		}
		if yyb9 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem6482)
		z.DecStructFieldNotFound(yyj9-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd6482)
}

func (x *Empty) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer6482
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [0]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(0)
			} else {
				yynn2 = 0
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd6482)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd6482)
			}
		}
	}
}

func (x *Empty) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer6482
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap6482 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd6482)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray6482 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd6482)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr6482)
		}
	}
}

func (x *Empty) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer6482
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey6482)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue6482)
		switch yys3 {
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd6482)
}

func (x *Empty) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer6482
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4 int
	var yyb4 bool
	var yyhl4 bool = l >= 0
	for {
		yyj4++
		if yyhl4 {
			yyb4 = yyj4 > l
		} else {
			yyb4 = r.CheckBreak()
		}
		if yyb4 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem6482)
		z.DecStructFieldNotFound(yyj4-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd6482)
}

func (x *DBStatsResponse) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer6482
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [7]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(7)
			} else {
				yynn2 = 7
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem6482)
				yym4 := z.EncBinary()
				_ = yym4
				if false {
				} else {
					r.EncodeInt(int64(x.FreePageN))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey6482)
				r.EncodeString(codecSelferC_UTF86482, string("FreePageN"))
				z.EncSendContainerState(codecSelfer_containerMapValue6482)
				yym5 := z.EncBinary()
				_ = yym5
				if false {
				} else {
					r.EncodeInt(int64(x.FreePageN))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem6482)
				yym7 := z.EncBinary()
				_ = yym7
				if false {
				} else {
					r.EncodeInt(int64(x.PendingPageN))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey6482)
				r.EncodeString(codecSelferC_UTF86482, string("PendingPageN"))
				z.EncSendContainerState(codecSelfer_containerMapValue6482)
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else {
					r.EncodeInt(int64(x.PendingPageN))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem6482)
				yym10 := z.EncBinary()
				_ = yym10
				if false {
				} else {
					r.EncodeInt(int64(x.FreeAlloc))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey6482)
				r.EncodeString(codecSelferC_UTF86482, string("FreeAlloc"))
				z.EncSendContainerState(codecSelfer_containerMapValue6482)
				yym11 := z.EncBinary()
				_ = yym11
				if false {
				} else {
					r.EncodeInt(int64(x.FreeAlloc))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem6482)
				yym13 := z.EncBinary()
				_ = yym13
				if false {
				} else {
					r.EncodeInt(int64(x.FreelistInuse))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey6482)
				r.EncodeString(codecSelferC_UTF86482, string("FreelistInuse"))
				z.EncSendContainerState(codecSelfer_containerMapValue6482)
				yym14 := z.EncBinary()
				_ = yym14
				if false {
				} else {
					r.EncodeInt(int64(x.FreelistInuse))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem6482)
				yym16 := z.EncBinary()
				_ = yym16
				if false {
				} else {
					r.EncodeInt(int64(x.TxN))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey6482)
				r.EncodeString(codecSelferC_UTF86482, string("TxN"))
				z.EncSendContainerState(codecSelfer_containerMapValue6482)
				yym17 := z.EncBinary()
				_ = yym17
				if false {
				} else {
					r.EncodeInt(int64(x.TxN))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem6482)
				yym19 := z.EncBinary()
				_ = yym19
				if false {
				} else {
					r.EncodeInt(int64(x.OpenTxN))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey6482)
				r.EncodeString(codecSelferC_UTF86482, string("OpenTxN"))
				z.EncSendContainerState(codecSelfer_containerMapValue6482)
				yym20 := z.EncBinary()
				_ = yym20
				if false {
				} else {
					r.EncodeInt(int64(x.OpenTxN))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem6482)
				yy22 := &x.TxStats
				yym23 := z.EncBinary()
				_ = yym23
				if false {
				} else if z.HasExtensions() && z.EncExt(yy22) {
				} else {
					z.EncFallback(yy22)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey6482)
				r.EncodeString(codecSelferC_UTF86482, string("TxStats"))
				z.EncSendContainerState(codecSelfer_containerMapValue6482)
				yy24 := &x.TxStats
				yym25 := z.EncBinary()
				_ = yym25
				if false {
				} else if z.HasExtensions() && z.EncExt(yy24) {
				} else {
					z.EncFallback(yy24)
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd6482)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd6482)
			}
		}
	}
}

func (x *DBStatsResponse) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer6482
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap6482 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd6482)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray6482 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd6482)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr6482)
		}
	}
}

func (x *DBStatsResponse) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer6482
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey6482)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue6482)
		switch yys3 {
		case "FreePageN":
			if r.TryDecodeAsNil() {
				x.FreePageN = 0
			} else {
				yyv4 := &x.FreePageN
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					*((*int)(yyv4)) = int(r.DecodeInt(codecSelferBitsize6482))
				}
			}
		case "PendingPageN":
			if r.TryDecodeAsNil() {
				x.PendingPageN = 0
			} else {
				yyv6 := &x.PendingPageN
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					*((*int)(yyv6)) = int(r.DecodeInt(codecSelferBitsize6482))
				}
			}
		case "FreeAlloc":
			if r.TryDecodeAsNil() {
				x.FreeAlloc = 0
			} else {
				yyv8 := &x.FreeAlloc
				yym9 := z.DecBinary()
				_ = yym9
				if false {
				} else {
					*((*int)(yyv8)) = int(r.DecodeInt(codecSelferBitsize6482))
				}
			}
		case "FreelistInuse":
			if r.TryDecodeAsNil() {
				x.FreelistInuse = 0
			} else {
				yyv10 := &x.FreelistInuse
				yym11 := z.DecBinary()
				_ = yym11
				if false {
				} else {
					*((*int)(yyv10)) = int(r.DecodeInt(codecSelferBitsize6482))
				}
			}
		case "TxN":
			if r.TryDecodeAsNil() {
				x.TxN = 0
			} else {
				yyv12 := &x.TxN
				yym13 := z.DecBinary()
				_ = yym13
				if false {
				} else {
					*((*int)(yyv12)) = int(r.DecodeInt(codecSelferBitsize6482))
				}
			}
		case "OpenTxN":
			if r.TryDecodeAsNil() {
				x.OpenTxN = 0
			} else {
				yyv14 := &x.OpenTxN
				yym15 := z.DecBinary()
				_ = yym15
				if false {
				} else {
					*((*int)(yyv14)) = int(r.DecodeInt(codecSelferBitsize6482))
				}
			}
		case "TxStats":
			if r.TryDecodeAsNil() {
				x.TxStats = pkg1_bolt.TxStats{}
			} else {
				yyv16 := &x.TxStats
				yym17 := z.DecBinary()
				_ = yym17
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv16) {
				} else {
					z.DecFallback(yyv16, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd6482)
}

func (x *DBStatsResponse) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer6482
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj18 int
	var yyb18 bool
	var yyhl18 bool = l >= 0
	yyj18++
	if yyhl18 {
		yyb18 = yyj18 > l
	} else {
		yyb18 = r.CheckBreak()
	}
	if yyb18 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd6482)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem6482)
	if r.TryDecodeAsNil() {
		x.FreePageN = 0
	} else {
		yyv19 := &x.FreePageN
		yym20 := z.DecBinary()
		_ = yym20
		if false {
		} else {
			*((*int)(yyv19)) = int(r.DecodeInt(codecSelferBitsize6482))
		}
	}
	yyj18++
	if yyhl18 {
		yyb18 = yyj18 > l
	} else {
		yyb18 = r.CheckBreak()
	}
	if yyb18 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd6482)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem6482)
	if r.TryDecodeAsNil() {
		x.PendingPageN = 0
	} else {
		yyv21 := &x.PendingPageN
		yym22 := z.DecBinary()
		_ = yym22
		if false {
		} else {
			*((*int)(yyv21)) = int(r.DecodeInt(codecSelferBitsize6482))
		}
	}
	yyj18++
	if yyhl18 {
		yyb18 = yyj18 > l
	} else {
		yyb18 = r.CheckBreak()
	}
	if yyb18 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd6482)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem6482)
	if r.TryDecodeAsNil() {
		x.FreeAlloc = 0
	} else {
		yyv23 := &x.FreeAlloc
		yym24 := z.DecBinary()
		_ = yym24
		if false {
		} else {
			*((*int)(yyv23)) = int(r.DecodeInt(codecSelferBitsize6482))
		}
	}
	yyj18++
	if yyhl18 {
		yyb18 = yyj18 > l
	} else {
		yyb18 = r.CheckBreak()
	}
	if yyb18 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd6482)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem6482)
	if r.TryDecodeAsNil() {
		x.FreelistInuse = 0
	} else {
		yyv25 := &x.FreelistInuse
		yym26 := z.DecBinary()
		_ = yym26
		if false {
		} else {
			*((*int)(yyv25)) = int(r.DecodeInt(codecSelferBitsize6482))
		}
	}
	yyj18++
	if yyhl18 {
		yyb18 = yyj18 > l
	} else {
		yyb18 = r.CheckBreak()
	}
	if yyb18 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd6482)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem6482)
	if r.TryDecodeAsNil() {
		x.TxN = 0
	} else {
		yyv27 := &x.TxN
		yym28 := z.DecBinary()
		_ = yym28
		if false {
		} else {
			*((*int)(yyv27)) = int(r.DecodeInt(codecSelferBitsize6482))
		}
	}
	yyj18++
	if yyhl18 {
		yyb18 = yyj18 > l
	} else {
		yyb18 = r.CheckBreak()
	}
	if yyb18 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd6482)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem6482)
	if r.TryDecodeAsNil() {
		x.OpenTxN = 0
	} else {
		yyv29 := &x.OpenTxN
		yym30 := z.DecBinary()
		_ = yym30
		if false {
		} else {
			*((*int)(yyv29)) = int(r.DecodeInt(codecSelferBitsize6482))
		}
	}
	yyj18++
	if yyhl18 {
		yyb18 = yyj18 > l
	} else {
		yyb18 = r.CheckBreak()
	}
	if yyb18 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd6482)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem6482)
	if r.TryDecodeAsNil() {
		x.TxStats = pkg1_bolt.TxStats{}
	} else {
		yyv31 := &x.TxStats
		yym32 := z.DecBinary()
		_ = yym32
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv31) {
		} else {
			z.DecFallback(yyv31, false)
		}
	}
	for {
		yyj18++
		if yyhl18 {
			yyb18 = yyj18 > l
		} else {
			yyb18 = r.CheckBreak()
		}
		if yyb18 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem6482)
		z.DecStructFieldNotFound(yyj18-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd6482)
}

func (x *BucketStatsRequest) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer6482
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [2]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(2)
			} else {
				yynn2 = 2
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem6482)
				yym4 := z.EncBinary()
				_ = yym4
				if false {
				} else {
					r.EncodeUint(uint64(x.ContextID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey6482)
				r.EncodeString(codecSelferC_UTF86482, string("ContextID"))
				z.EncSendContainerState(codecSelfer_containerMapValue6482)
				yym5 := z.EncBinary()
				_ = yym5
				if false {
				} else {
					r.EncodeUint(uint64(x.ContextID))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem6482)
				yym7 := z.EncBinary()
				_ = yym7
				if false {
				} else {
					r.EncodeUint(uint64(x.BucketID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey6482)
				r.EncodeString(codecSelferC_UTF86482, string("BucketID"))
				z.EncSendContainerState(codecSelfer_containerMapValue6482)
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else {
					r.EncodeUint(uint64(x.BucketID))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd6482)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd6482)
			}
		}
	}
}

func (x *BucketStatsRequest) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer6482
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap6482 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd6482)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray6482 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd6482)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr6482)
		}
	}
}

func (x *BucketStatsRequest) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer6482
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey6482)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue6482)
		switch yys3 {
		case "ContextID":
			if r.TryDecodeAsNil() {
				x.ContextID = 0
			} else {
				yyv4 := &x.ContextID
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					*((*uint64)(yyv4)) = uint64(r.DecodeUint(64))
				}
			}
		case "BucketID":
			if r.TryDecodeAsNil() {
				x.BucketID = 0
			} else {
				yyv6 := &x.BucketID
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					*((*uint64)(yyv6)) = uint64(r.DecodeUint(64))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd6482)
}

func (x *BucketStatsRequest) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer6482
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj8 int
	var yyb8 bool
	var yyhl8 bool = l >= 0
	yyj8++
	if yyhl8 {
		yyb8 = yyj8 > l
	} else {
		yyb8 = r.CheckBreak()
	}
	if yyb8 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd6482)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem6482)
	if r.TryDecodeAsNil() {
		x.ContextID = 0
	} else {
		yyv9 := &x.ContextID
		yym10 := z.DecBinary()
		_ = yym10
		if false {
		} else {
			*((*uint64)(yyv9)) = uint64(r.DecodeUint(64))
		}
	}
	yyj8++
	if yyhl8 {
		yyb8 = yyj8 > l
	} else {
		yyb8 = r.CheckBreak()
	}
	if yyb8 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd6482)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem6482)
	if r.TryDecodeAsNil() {
		x.BucketID = 0
	} else {
		yyv11 := &x.BucketID
		yym12 := z.DecBinary()
		_ = yym12
		if false {
		} else {
			*((*uint64)(yyv11)) = uint64(r.DecodeUint(64))
		}
	}
	for {
		yyj8++
		if yyhl8 {
			yyb8 = yyj8 > l
		} else {
			yyb8 = r.CheckBreak()
		}
		if yyb8 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem6482)
		z.DecStructFieldNotFound(yyj8-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd6482)
}

func (x *BucketStatsResponse) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer6482
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [13]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(13)
			} else {
				yynn2 = 13
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem6482)
				yym4 := z.EncBinary()
				_ = yym4
				if false {
				} else {
					r.EncodeInt(int64(x.BranchPageN))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey6482)
				r.EncodeString(codecSelferC_UTF86482, string("BranchPageN"))
				z.EncSendContainerState(codecSelfer_containerMapValue6482)
				yym5 := z.EncBinary()
				_ = yym5
				if false {
				} else {
					r.EncodeInt(int64(x.BranchPageN))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem6482)
				yym7 := z.EncBinary()
				_ = yym7
				if false {
				} else {
					r.EncodeInt(int64(x.BranchOverflowN))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey6482)
				r.EncodeString(codecSelferC_UTF86482, string("BranchOverflowN"))
				z.EncSendContainerState(codecSelfer_containerMapValue6482)
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else {
					r.EncodeInt(int64(x.BranchOverflowN))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem6482)
				yym10 := z.EncBinary()
				_ = yym10
				if false {
				} else {
					r.EncodeInt(int64(x.LeafPageN))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey6482)
				r.EncodeString(codecSelferC_UTF86482, string("LeafPageN"))
				z.EncSendContainerState(codecSelfer_containerMapValue6482)
				yym11 := z.EncBinary()
				_ = yym11
				if false {
				} else {
					r.EncodeInt(int64(x.LeafPageN))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem6482)
				yym13 := z.EncBinary()
				_ = yym13
				if false {
				} else {
					r.EncodeInt(int64(x.LeafOverflowN))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey6482)
				r.EncodeString(codecSelferC_UTF86482, string("LeafOverflowN"))
				z.EncSendContainerState(codecSelfer_containerMapValue6482)
				yym14 := z.EncBinary()
				_ = yym14
				if false {
				} else {
					r.EncodeInt(int64(x.LeafOverflowN))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem6482)
				yym16 := z.EncBinary()
				_ = yym16
				if false {
				} else {
					r.EncodeInt(int64(x.KeyN))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey6482)
				r.EncodeString(codecSelferC_UTF86482, string("KeyN"))
				z.EncSendContainerState(codecSelfer_containerMapValue6482)
				yym17 := z.EncBinary()
				_ = yym17
				if false {
				} else {
					r.EncodeInt(int64(x.KeyN))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem6482)
				yym19 := z.EncBinary()
				_ = yym19
				if false {
				} else {
					r.EncodeInt(int64(x.Depth))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey6482)
				r.EncodeString(codecSelferC_UTF86482, string("Depth"))
				z.EncSendContainerState(codecSelfer_containerMapValue6482)
				yym20 := z.EncBinary()
				_ = yym20
				if false {
				} else {
					r.EncodeInt(int64(x.Depth))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem6482)
				yym22 := z.EncBinary()
				_ = yym22
				if false {
				} else {
					r.EncodeInt(int64(x.BranchAlloc))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey6482)
				r.EncodeString(codecSelferC_UTF86482, string("BranchAlloc"))
				z.EncSendContainerState(codecSelfer_containerMapValue6482)
				yym23 := z.EncBinary()
				_ = yym23
				if false {
				} else {
					r.EncodeInt(int64(x.BranchAlloc))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem6482)
				yym25 := z.EncBinary()
				_ = yym25
				if false {
				} else {
					r.EncodeInt(int64(x.BranchInuse))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey6482)
				r.EncodeString(codecSelferC_UTF86482, string("BranchInuse"))
				z.EncSendContainerState(codecSelfer_containerMapValue6482)
				yym26 := z.EncBinary()
				_ = yym26
				if false {
				} else {
					r.EncodeInt(int64(x.BranchInuse))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem6482)
				yym28 := z.EncBinary()
				_ = yym28
				if false {
				} else {
					r.EncodeInt(int64(x.LeafAlloc))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey6482)
				r.EncodeString(codecSelferC_UTF86482, string("LeafAlloc"))
				z.EncSendContainerState(codecSelfer_containerMapValue6482)
				yym29 := z.EncBinary()
				_ = yym29
				if false {
				} else {
					r.EncodeInt(int64(x.LeafAlloc))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem6482)
				yym31 := z.EncBinary()
				_ = yym31
				if false {
				} else {
					r.EncodeInt(int64(x.LeafInuse))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey6482)
				r.EncodeString(codecSelferC_UTF86482, string("LeafInuse"))
				z.EncSendContainerState(codecSelfer_containerMapValue6482)
				yym32 := z.EncBinary()
				_ = yym32
				if false {
				} else {
					r.EncodeInt(int64(x.LeafInuse))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem6482)
				yym34 := z.EncBinary()
				_ = yym34
				if false {
				} else {
					r.EncodeInt(int64(x.BucketN))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey6482)
				r.EncodeString(codecSelferC_UTF86482, string("BucketN"))
				z.EncSendContainerState(codecSelfer_containerMapValue6482)
				yym35 := z.EncBinary()
				_ = yym35
				if false {
				} else {
					r.EncodeInt(int64(x.BucketN))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem6482)
				yym37 := z.EncBinary()
				_ = yym37
				if false {
				} else {
					r.EncodeInt(int64(x.InlineBucketN))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey6482)
				r.EncodeString(codecSelferC_UTF86482, string("InlineBucketN"))
				z.EncSendContainerState(codecSelfer_containerMapValue6482)
				yym38 := z.EncBinary()
				_ = yym38
				if false {
				} else {
					r.EncodeInt(int64(x.InlineBucketN))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem6482)
				yym40 := z.EncBinary()
				_ = yym40
				if false {
				} else {
					r.EncodeInt(int64(x.InlineBucketInuse))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey6482)
				r.EncodeString(codecSelferC_UTF86482, string("InlineBucketInuse"))
				z.EncSendContainerState(codecSelfer_containerMapValue6482)
				yym41 := z.EncBinary()
				_ = yym41
				if false {
				} else {
					r.EncodeInt(int64(x.InlineBucketInuse))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd6482)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd6482)
			}
		}
	}
}

func (x *BucketStatsResponse) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer6482
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap6482 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd6482)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray6482 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd6482)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr6482)
		}
	}
}

func (x *BucketStatsResponse) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer6482
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey6482)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue6482)
		switch yys3 {
		case "BranchPageN":
			if r.TryDecodeAsNil() {
				x.BranchPageN = 0
			} else {
				yyv4 := &x.BranchPageN
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					*((*int)(yyv4)) = int(r.DecodeInt(codecSelferBitsize6482))
				}
			}
		case "BranchOverflowN":
			if r.TryDecodeAsNil() {
				x.BranchOverflowN = 0
			} else {
				yyv6 := &x.BranchOverflowN
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					*((*int)(yyv6)) = int(r.DecodeInt(codecSelferBitsize6482))
				}
			}
		case "LeafPageN":
			if r.TryDecodeAsNil() {
				x.LeafPageN = 0
			} else {
				yyv8 := &x.LeafPageN
				yym9 := z.DecBinary()
				_ = yym9
				if false {
				} else {
					*((*int)(yyv8)) = int(r.DecodeInt(codecSelferBitsize6482))
				}
			}
		case "LeafOverflowN":
			if r.TryDecodeAsNil() {
				x.LeafOverflowN = 0
			} else {
				yyv10 := &x.LeafOverflowN
				yym11 := z.DecBinary()
				_ = yym11
				if false {
				} else {
					*((*int)(yyv10)) = int(r.DecodeInt(codecSelferBitsize6482))
				}
			}
		case "KeyN":
			if r.TryDecodeAsNil() {
				x.KeyN = 0
			} else {
				yyv12 := &x.KeyN
				yym13 := z.DecBinary()
				_ = yym13
				if false {
				} else {
					*((*int)(yyv12)) = int(r.DecodeInt(codecSelferBitsize6482))
				}
			}
		case "Depth":
			if r.TryDecodeAsNil() {
				x.Depth = 0
			} else {
				yyv14 := &x.Depth
				yym15 := z.DecBinary()
				_ = yym15
				if false {
				} else {
					*((*int)(yyv14)) = int(r.DecodeInt(codecSelferBitsize6482))
				}
			}
		case "BranchAlloc":
			if r.TryDecodeAsNil() {
				x.BranchAlloc = 0
			} else {
				yyv16 := &x.BranchAlloc
				yym17 := z.DecBinary()
				_ = yym17
				if false {
				} else {
					*((*int)(yyv16)) = int(r.DecodeInt(codecSelferBitsize6482))
				}
			}
		case "BranchInuse":
			if r.TryDecodeAsNil() {
				x.BranchInuse = 0
			} else {
				yyv18 := &x.BranchInuse
				yym19 := z.DecBinary()
				_ = yym19
				if false {
				} else {
					*((*int)(yyv18)) = int(r.DecodeInt(codecSelferBitsize6482))
				}
			}
		case "LeafAlloc":
			if r.TryDecodeAsNil() {
				x.LeafAlloc = 0
			} else {
				yyv20 := &x.LeafAlloc
				yym21 := z.DecBinary()
				_ = yym21
				if false {
				} else {
					*((*int)(yyv20)) = int(r.DecodeInt(codecSelferBitsize6482))
				}
			}
		case "LeafInuse":
			if r.TryDecodeAsNil() {
				x.LeafInuse = 0
			} else {
				yyv22 := &x.LeafInuse
				yym23 := z.DecBinary()
				_ = yym23
				if false {
				} else {
					*((*int)(yyv22)) = int(r.DecodeInt(codecSelferBitsize6482))
				}
			}
		case "BucketN":
			if r.TryDecodeAsNil() {
				x.BucketN = 0
			} else {
				yyv24 := &x.BucketN
				yym25 := z.DecBinary()
				_ = yym25
				if false {
				} else {
					*((*int)(yyv24)) = int(r.DecodeInt(codecSelferBitsize6482))
				}
			}
		case "InlineBucketN":
			if r.TryDecodeAsNil() {
				x.InlineBucketN = 0
			} else {
				yyv26 := &x.InlineBucketN
				yym27 := z.DecBinary()
				_ = yym27
				if false {
				} else {
					*((*int)(yyv26)) = int(r.DecodeInt(codecSelferBitsize6482))
				}
			}
		case "InlineBucketInuse":
			if r.TryDecodeAsNil() {
				x.InlineBucketInuse = 0
			} else {
				yyv28 := &x.InlineBucketInuse
				yym29 := z.DecBinary()
				_ = yym29
				if false {
				} else {
					*((*int)(yyv28)) = int(r.DecodeInt(codecSelferBitsize6482))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd6482)
}

func (x *BucketStatsResponse) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer6482
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj30 int
	var yyb30 bool
	var yyhl30 bool = l >= 0
	yyj30++
	if yyhl30 {
		yyb30 = yyj30 > l
	} else {
		yyb30 = r.CheckBreak()
	}
	if yyb30 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd6482)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem6482)
	if r.TryDecodeAsNil() {
		x.BranchPageN = 0
	} else {
		yyv31 := &x.BranchPageN
		yym32 := z.DecBinary()
		_ = yym32
		if false {
		} else {
			*((*int)(yyv31)) = int(r.DecodeInt(codecSelferBitsize6482))
		}
	}
	yyj30++
	if yyhl30 {
		yyb30 = yyj30 > l
	} else {
		yyb30 = r.CheckBreak()
	}
	if yyb30 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd6482)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem6482)
	if r.TryDecodeAsNil() {
		x.BranchOverflowN = 0
	} else {
		yyv33 := &x.BranchOverflowN
		yym34 := z.DecBinary()
		_ = yym34
		if false {
		} else {
			*((*int)(yyv33)) = int(r.DecodeInt(codecSelferBitsize6482))
		}
	}
	yyj30++
	if yyhl30 {
		yyb30 = yyj30 > l
	} else {
		yyb30 = r.CheckBreak()
	}
	if yyb30 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd6482)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem6482)
	if r.TryDecodeAsNil() {
		x.LeafPageN = 0
	} else {
		yyv35 := &x.LeafPageN
		yym36 := z.DecBinary()
		_ = yym36
		if false {
		} else {
			*((*int)(yyv35)) = int(r.DecodeInt(codecSelferBitsize6482))
		}
	}
	yyj30++
	if yyhl30 {
		yyb30 = yyj30 > l
	} else {
		yyb30 = r.CheckBreak()
	}
	if yyb30 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd6482)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem6482)
	if r.TryDecodeAsNil() {
		x.LeafOverflowN = 0
	} else {
		yyv37 := &x.LeafOverflowN
		yym38 := z.DecBinary()
		_ = yym38
		if false {
		} else {
			*((*int)(yyv37)) = int(r.DecodeInt(codecSelferBitsize6482))
		}
	}
	yyj30++
	if yyhl30 {
		yyb30 = yyj30 > l
	} else {
		yyb30 = r.CheckBreak()
	}
	if yyb30 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd6482)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem6482)
	if r.TryDecodeAsNil() {
		x.KeyN = 0
	} else {
		yyv39 := &x.KeyN
		yym40 := z.DecBinary()
		_ = yym40
		if false {
		} else {
			*((*int)(yyv39)) = int(r.DecodeInt(codecSelferBitsize6482))
		}
	}
	yyj30++
	if yyhl30 {
		yyb30 = yyj30 > l
	} else {
		yyb30 = r.CheckBreak()
	}
	if yyb30 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd6482)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem6482)
	if r.TryDecodeAsNil() {
		x.Depth = 0
	} else {
		yyv41 := &x.Depth
		yym42 := z.DecBinary()
		_ = yym42
		if false {
		} else {
			*((*int)(yyv41)) = int(r.DecodeInt(codecSelferBitsize6482))
		}
	}
	yyj30++
	if yyhl30 {
		yyb30 = yyj30 > l
	} else {
		yyb30 = r.CheckBreak()
	}
	if yyb30 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd6482)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem6482)
	if r.TryDecodeAsNil() {
		x.BranchAlloc = 0
	} else {
		yyv43 := &x.BranchAlloc
		yym44 := z.DecBinary()
		_ = yym44
		if false {
		} else {
			*((*int)(yyv43)) = int(r.DecodeInt(codecSelferBitsize6482))
		}
	}
	yyj30++
	if yyhl30 {
		yyb30 = yyj30 > l
	} else {
		yyb30 = r.CheckBreak()
	}
	if yyb30 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd6482)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem6482)
	if r.TryDecodeAsNil() {
		x.BranchInuse = 0
	} else {
		yyv45 := &x.BranchInuse
		yym46 := z.DecBinary()
		_ = yym46
		if false {
		} else {
			*((*int)(yyv45)) = int(r.DecodeInt(codecSelferBitsize6482))
		}
	}
	yyj30++
	if yyhl30 {
		yyb30 = yyj30 > l
	} else {
		yyb30 = r.CheckBreak()
	}
	if yyb30 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd6482)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem6482)
	if r.TryDecodeAsNil() {
		x.LeafAlloc = 0
	} else {
		yyv47 := &x.LeafAlloc
		yym48 := z.DecBinary()
		_ = yym48
		if false {
		} else {
			*((*int)(yyv47)) = int(r.DecodeInt(codecSelferBitsize6482))
		}
	}
	yyj30++
	if yyhl30 {
		yyb30 = yyj30 > l
	} else {
		yyb30 = r.CheckBreak()
	}
	if yyb30 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd6482)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem6482)
	if r.TryDecodeAsNil() {
		x.LeafInuse = 0
	} else {
		yyv49 := &x.LeafInuse
		yym50 := z.DecBinary()
		_ = yym50
		if false {
		} else {
			*((*int)(yyv49)) = int(r.DecodeInt(codecSelferBitsize6482))
		}
	}
	yyj30++
	if yyhl30 {
		yyb30 = yyj30 > l
	} else {
		yyb30 = r.CheckBreak()
	}
	if yyb30 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd6482)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem6482)
	if r.TryDecodeAsNil() {
		x.BucketN = 0
	} else {
		yyv51 := &x.BucketN
		yym52 := z.DecBinary()
		_ = yym52
		if false {
		} else {
			*((*int)(yyv51)) = int(r.DecodeInt(codecSelferBitsize6482))
		}
	}
	yyj30++
	if yyhl30 {
		yyb30 = yyj30 > l
	} else {
		yyb30 = r.CheckBreak()
	}
	if yyb30 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd6482)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem6482)
	if r.TryDecodeAsNil() {
		x.InlineBucketN = 0
	} else {
		yyv53 := &x.InlineBucketN
		yym54 := z.DecBinary()
		_ = yym54
		if false {
		} else {
			*((*int)(yyv53)) = int(r.DecodeInt(codecSelferBitsize6482))
		}
	}
	yyj30++
	if yyhl30 {
		yyb30 = yyj30 > l
	} else {
		yyb30 = r.CheckBreak()
	}
	if yyb30 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd6482)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem6482)
	if r.TryDecodeAsNil() {
		x.InlineBucketInuse = 0
	} else {
		yyv55 := &x.InlineBucketInuse
		yym56 := z.DecBinary()
		_ = yym56
		if false {
		} else {
			*((*int)(yyv55)) = int(r.DecodeInt(codecSelferBitsize6482))
		}
	}
	for {
		yyj30++
		if yyhl30 {
			yyb30 = yyj30 > l
		} else {
			yyb30 = r.CheckBreak()
		}
		if yyb30 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem6482)
		z.DecStructFieldNotFound(yyj30-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd6482)
}

func (x *BeginTransactionRequest) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer6482
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [1]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(1)
			} else {
				yynn2 = 1
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem6482)
				yym4 := z.EncBinary()
				_ = yym4
				if false {
				} else {
					r.EncodeBool(bool(x.Writable))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey6482)
				r.EncodeString(codecSelferC_UTF86482, string("Writable"))
				z.EncSendContainerState(codecSelfer_containerMapValue6482)
				yym5 := z.EncBinary()
				_ = yym5
				if false {
				} else {
					r.EncodeBool(bool(x.Writable))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd6482)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd6482)
			}
		}
	}
}

func (x *BeginTransactionRequest) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer6482
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap6482 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd6482)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray6482 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd6482)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr6482)
		}
	}
}

func (x *BeginTransactionRequest) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer6482
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey6482)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue6482)
		switch yys3 {
		case "Writable":
			if r.TryDecodeAsNil() {
				x.Writable = false
			} else {
				yyv4 := &x.Writable
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					*((*bool)(yyv4)) = r.DecodeBool()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd6482)
}

func (x *BeginTransactionRequest) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer6482
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj6 int
	var yyb6 bool
	var yyhl6 bool = l >= 0
	yyj6++
	if yyhl6 {
		yyb6 = yyj6 > l
	} else {
		yyb6 = r.CheckBreak()
	}
	if yyb6 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd6482)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem6482)
	if r.TryDecodeAsNil() {
		x.Writable = false
	} else {
		yyv7 := &x.Writable
		yym8 := z.DecBinary()
		_ = yym8
		if false {
		} else {
			*((*bool)(yyv7)) = r.DecodeBool()
		}
	}
	for {
		yyj6++
		if yyhl6 {
			yyb6 = yyj6 > l
		} else {
			yyb6 = r.CheckBreak()
		}
		if yyb6 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem6482)
		z.DecStructFieldNotFound(yyj6-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd6482)
}

func (x *BeginTransactionResponse) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer6482
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [1]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(1)
			} else {
				yynn2 = 1
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem6482)
				yym4 := z.EncBinary()
				_ = yym4
				if false {
				} else {
					r.EncodeUint(uint64(x.ContextID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey6482)
				r.EncodeString(codecSelferC_UTF86482, string("ContextID"))
				z.EncSendContainerState(codecSelfer_containerMapValue6482)
				yym5 := z.EncBinary()
				_ = yym5
				if false {
				} else {
					r.EncodeUint(uint64(x.ContextID))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd6482)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd6482)
			}
		}
	}
}

func (x *BeginTransactionResponse) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer6482
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap6482 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd6482)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray6482 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd6482)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr6482)
		}
	}
}

func (x *BeginTransactionResponse) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer6482
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey6482)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue6482)
		switch yys3 {
		case "ContextID":
			if r.TryDecodeAsNil() {
				x.ContextID = 0
			} else {
				yyv4 := &x.ContextID
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					*((*uint64)(yyv4)) = uint64(r.DecodeUint(64))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd6482)
}

func (x *BeginTransactionResponse) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer6482
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj6 int
	var yyb6 bool
	var yyhl6 bool = l >= 0
	yyj6++
	if yyhl6 {
		yyb6 = yyj6 > l
	} else {
		yyb6 = r.CheckBreak()
	}
	if yyb6 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd6482)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem6482)
	if r.TryDecodeAsNil() {
		x.ContextID = 0
	} else {
		yyv7 := &x.ContextID
		yym8 := z.DecBinary()
		_ = yym8
		if false {
		} else {
			*((*uint64)(yyv7)) = uint64(r.DecodeUint(64))
		}
	}
	for {
		yyj6++
		if yyhl6 {
			yyb6 = yyj6 > l
		} else {
			yyb6 = r.CheckBreak()
		}
		if yyb6 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem6482)
		z.DecStructFieldNotFound(yyj6-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd6482)
}

func (x *CommitTransactionResponse) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer6482
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [0]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(0)
			} else {
				yynn2 = 0
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd6482)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd6482)
			}
		}
	}
}

func (x *CommitTransactionResponse) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer6482
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap6482 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd6482)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray6482 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd6482)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr6482)
		}
	}
}

func (x *CommitTransactionResponse) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer6482
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey6482)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue6482)
		switch yys3 {
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd6482)
}

func (x *CommitTransactionResponse) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer6482
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4 int
	var yyb4 bool
	var yyhl4 bool = l >= 0
	for {
		yyj4++
		if yyhl4 {
			yyb4 = yyj4 > l
		} else {
			yyb4 = r.CheckBreak()
		}
		if yyb4 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem6482)
		z.DecStructFieldNotFound(yyj4-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd6482)
}

func (x *RollbackTransactionResponse) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer6482
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [0]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(0)
			} else {
				yynn2 = 0
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd6482)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd6482)
			}
		}
	}
}

func (x *RollbackTransactionResponse) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer6482
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap6482 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd6482)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray6482 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd6482)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr6482)
		}
	}
}

func (x *RollbackTransactionResponse) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer6482
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey6482)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue6482)
		switch yys3 {
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd6482)
}

func (x *RollbackTransactionResponse) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer6482
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4 int
	var yyb4 bool
	var yyhl4 bool = l >= 0
	for {
		yyj4++
		if yyhl4 {
			yyb4 = yyj4 > l
		} else {
			yyb4 = r.CheckBreak()
		}
		if yyb4 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem6482)
		z.DecStructFieldNotFound(yyj4-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd6482)
}

func (x *BucketRequest) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer6482
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [2]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(2)
			} else {
				yynn2 = 2
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem6482)
				yym4 := z.EncBinary()
				_ = yym4
				if false {
				} else {
					r.EncodeUint(uint64(x.ContextID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey6482)
				r.EncodeString(codecSelferC_UTF86482, string("ContextID"))
				z.EncSendContainerState(codecSelfer_containerMapValue6482)
				yym5 := z.EncBinary()
				_ = yym5
				if false {
				} else {
					r.EncodeUint(uint64(x.ContextID))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem6482)
				if x.Key == nil {
					r.EncodeNil()
				} else {
					yym7 := z.EncBinary()
					_ = yym7
					if false {
					} else {
						r.EncodeStringBytes(codecSelferC_RAW6482, []byte(x.Key))
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey6482)
				r.EncodeString(codecSelferC_UTF86482, string("Key"))
				z.EncSendContainerState(codecSelfer_containerMapValue6482)
				if x.Key == nil {
					r.EncodeNil()
				} else {
					yym8 := z.EncBinary()
					_ = yym8
					if false {
					} else {
						r.EncodeStringBytes(codecSelferC_RAW6482, []byte(x.Key))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd6482)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd6482)
			}
		}
	}
}

func (x *BucketRequest) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer6482
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap6482 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd6482)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray6482 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd6482)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr6482)
		}
	}
}

func (x *BucketRequest) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer6482
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey6482)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue6482)
		switch yys3 {
		case "ContextID":
			if r.TryDecodeAsNil() {
				x.ContextID = 0
			} else {
				yyv4 := &x.ContextID
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					*((*uint64)(yyv4)) = uint64(r.DecodeUint(64))
				}
			}
		case "Key":
			if r.TryDecodeAsNil() {
				x.Key = nil
			} else {
				yyv6 := &x.Key
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					*yyv6 = r.DecodeBytes(*(*[]byte)(yyv6), false, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd6482)
}

func (x *BucketRequest) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer6482
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj8 int
	var yyb8 bool
	var yyhl8 bool = l >= 0
	yyj8++
	if yyhl8 {
		yyb8 = yyj8 > l
	} else {
		yyb8 = r.CheckBreak()
	}
	if yyb8 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd6482)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem6482)
	if r.TryDecodeAsNil() {
		x.ContextID = 0
	} else {
		yyv9 := &x.ContextID
		yym10 := z.DecBinary()
		_ = yym10
		if false {
		} else {
			*((*uint64)(yyv9)) = uint64(r.DecodeUint(64))
		}
	}
	yyj8++
	if yyhl8 {
		yyb8 = yyj8 > l
	} else {
		yyb8 = r.CheckBreak()
	}
	if yyb8 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd6482)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem6482)
	if r.TryDecodeAsNil() {
		x.Key = nil
	} else {
		yyv11 := &x.Key
		yym12 := z.DecBinary()
		_ = yym12
		if false {
		} else {
			*yyv11 = r.DecodeBytes(*(*[]byte)(yyv11), false, false)
		}
	}
	for {
		yyj8++
		if yyhl8 {
			yyb8 = yyj8 > l
		} else {
			yyb8 = r.CheckBreak()
		}
		if yyb8 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem6482)
		z.DecStructFieldNotFound(yyj8-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd6482)
}

func (x *BucketResponse) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer6482
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [2]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(2)
			} else {
				yynn2 = 2
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem6482)
				yym4 := z.EncBinary()
				_ = yym4
				if false {
				} else {
					r.EncodeUint(uint64(x.BucketID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey6482)
				r.EncodeString(codecSelferC_UTF86482, string("BucketID"))
				z.EncSendContainerState(codecSelfer_containerMapValue6482)
				yym5 := z.EncBinary()
				_ = yym5
				if false {
				} else {
					r.EncodeUint(uint64(x.BucketID))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem6482)
				yym7 := z.EncBinary()
				_ = yym7
				if false {
				} else {
					r.EncodeUint(uint64(x.BucketContextID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey6482)
				r.EncodeString(codecSelferC_UTF86482, string("BucketContextID"))
				z.EncSendContainerState(codecSelfer_containerMapValue6482)
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else {
					r.EncodeUint(uint64(x.BucketContextID))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd6482)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd6482)
			}
		}
	}
}

func (x *BucketResponse) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer6482
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap6482 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd6482)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray6482 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd6482)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr6482)
		}
	}
}

func (x *BucketResponse) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer6482
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey6482)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue6482)
		switch yys3 {
		case "BucketID":
			if r.TryDecodeAsNil() {
				x.BucketID = 0
			} else {
				yyv4 := &x.BucketID
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					*((*uint64)(yyv4)) = uint64(r.DecodeUint(64))
				}
			}
		case "BucketContextID":
			if r.TryDecodeAsNil() {
				x.BucketContextID = 0
			} else {
				yyv6 := &x.BucketContextID
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					*((*uint64)(yyv6)) = uint64(r.DecodeUint(64))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd6482)
}

func (x *BucketResponse) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer6482
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj8 int
	var yyb8 bool
	var yyhl8 bool = l >= 0
	yyj8++
	if yyhl8 {
		yyb8 = yyj8 > l
	} else {
		yyb8 = r.CheckBreak()
	}
	if yyb8 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd6482)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem6482)
	if r.TryDecodeAsNil() {
		x.BucketID = 0
	} else {
		yyv9 := &x.BucketID
		yym10 := z.DecBinary()
		_ = yym10
		if false {
		} else {
			*((*uint64)(yyv9)) = uint64(r.DecodeUint(64))
		}
	}
	yyj8++
	if yyhl8 {
		yyb8 = yyj8 > l
	} else {
		yyb8 = r.CheckBreak()
	}
	if yyb8 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd6482)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem6482)
	if r.TryDecodeAsNil() {
		x.BucketContextID = 0
	} else {
		yyv11 := &x.BucketContextID
		yym12 := z.DecBinary()
		_ = yym12
		if false {
		} else {
			*((*uint64)(yyv11)) = uint64(r.DecodeUint(64))
		}
	}
	for {
		yyj8++
		if yyhl8 {
			yyb8 = yyj8 > l
		} else {
			yyb8 = r.CheckBreak()
		}
		if yyb8 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem6482)
		z.DecStructFieldNotFound(yyj8-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd6482)
}

func (x *GetReqeust) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer6482
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [3]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(3)
			} else {
				yynn2 = 3
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem6482)
				yym4 := z.EncBinary()
				_ = yym4
				if false {
				} else {
					r.EncodeUint(uint64(x.BucketID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey6482)
				r.EncodeString(codecSelferC_UTF86482, string("BucketID"))
				z.EncSendContainerState(codecSelfer_containerMapValue6482)
				yym5 := z.EncBinary()
				_ = yym5
				if false {
				} else {
					r.EncodeUint(uint64(x.BucketID))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem6482)
				yym7 := z.EncBinary()
				_ = yym7
				if false {
				} else {
					r.EncodeUint(uint64(x.ContextID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey6482)
				r.EncodeString(codecSelferC_UTF86482, string("ContextID"))
				z.EncSendContainerState(codecSelfer_containerMapValue6482)
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else {
					r.EncodeUint(uint64(x.ContextID))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem6482)
				if x.Key == nil {
					r.EncodeNil()
				} else {
					yym10 := z.EncBinary()
					_ = yym10
					if false {
					} else {
						r.EncodeStringBytes(codecSelferC_RAW6482, []byte(x.Key))
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey6482)
				r.EncodeString(codecSelferC_UTF86482, string("Key"))
				z.EncSendContainerState(codecSelfer_containerMapValue6482)
				if x.Key == nil {
					r.EncodeNil()
				} else {
					yym11 := z.EncBinary()
					_ = yym11
					if false {
					} else {
						r.EncodeStringBytes(codecSelferC_RAW6482, []byte(x.Key))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd6482)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd6482)
			}
		}
	}
}

func (x *GetReqeust) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer6482
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap6482 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd6482)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray6482 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd6482)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr6482)
		}
	}
}

func (x *GetReqeust) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer6482
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey6482)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue6482)
		switch yys3 {
		case "BucketID":
			if r.TryDecodeAsNil() {
				x.BucketID = 0
			} else {
				yyv4 := &x.BucketID
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					*((*uint64)(yyv4)) = uint64(r.DecodeUint(64))
				}
			}
		case "ContextID":
			if r.TryDecodeAsNil() {
				x.ContextID = 0
			} else {
				yyv6 := &x.ContextID
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					*((*uint64)(yyv6)) = uint64(r.DecodeUint(64))
				}
			}
		case "Key":
			if r.TryDecodeAsNil() {
				x.Key = nil
			} else {
				yyv8 := &x.Key
				yym9 := z.DecBinary()
				_ = yym9
				if false {
				} else {
					*yyv8 = r.DecodeBytes(*(*[]byte)(yyv8), false, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd6482)
}

func (x *GetReqeust) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer6482
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj10 int
	var yyb10 bool
	var yyhl10 bool = l >= 0
	yyj10++
	if yyhl10 {
		yyb10 = yyj10 > l
	} else {
		yyb10 = r.CheckBreak()
	}
	if yyb10 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd6482)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem6482)
	if r.TryDecodeAsNil() {
		x.BucketID = 0
	} else {
		yyv11 := &x.BucketID
		yym12 := z.DecBinary()
		_ = yym12
		if false {
		} else {
			*((*uint64)(yyv11)) = uint64(r.DecodeUint(64))
		}
	}
	yyj10++
	if yyhl10 {
		yyb10 = yyj10 > l
	} else {
		yyb10 = r.CheckBreak()
	}
	if yyb10 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd6482)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem6482)
	if r.TryDecodeAsNil() {
		x.ContextID = 0
	} else {
		yyv13 := &x.ContextID
		yym14 := z.DecBinary()
		_ = yym14
		if false {
		} else {
			*((*uint64)(yyv13)) = uint64(r.DecodeUint(64))
		}
	}
	yyj10++
	if yyhl10 {
		yyb10 = yyj10 > l
	} else {
		yyb10 = r.CheckBreak()
	}
	if yyb10 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd6482)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem6482)
	if r.TryDecodeAsNil() {
		x.Key = nil
	} else {
		yyv15 := &x.Key
		yym16 := z.DecBinary()
		_ = yym16
		if false {
		} else {
			*yyv15 = r.DecodeBytes(*(*[]byte)(yyv15), false, false)
		}
	}
	for {
		yyj10++
		if yyhl10 {
			yyb10 = yyj10 > l
		} else {
			yyb10 = r.CheckBreak()
		}
		if yyb10 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem6482)
		z.DecStructFieldNotFound(yyj10-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd6482)
}

func (x *GetResponse) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer6482
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [1]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(1)
			} else {
				yynn2 = 1
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem6482)
				if x.Val == nil {
					r.EncodeNil()
				} else {
					yym4 := z.EncBinary()
					_ = yym4
					if false {
					} else {
						r.EncodeStringBytes(codecSelferC_RAW6482, []byte(x.Val))
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey6482)
				r.EncodeString(codecSelferC_UTF86482, string("Val"))
				z.EncSendContainerState(codecSelfer_containerMapValue6482)
				if x.Val == nil {
					r.EncodeNil()
				} else {
					yym5 := z.EncBinary()
					_ = yym5
					if false {
					} else {
						r.EncodeStringBytes(codecSelferC_RAW6482, []byte(x.Val))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd6482)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd6482)
			}
		}
	}
}

func (x *GetResponse) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer6482
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap6482 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd6482)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray6482 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd6482)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr6482)
		}
	}
}

func (x *GetResponse) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer6482
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey6482)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue6482)
		switch yys3 {
		case "Val":
			if r.TryDecodeAsNil() {
				x.Val = nil
			} else {
				yyv4 := &x.Val
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					*yyv4 = r.DecodeBytes(*(*[]byte)(yyv4), false, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd6482)
}

func (x *GetResponse) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer6482
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj6 int
	var yyb6 bool
	var yyhl6 bool = l >= 0
	yyj6++
	if yyhl6 {
		yyb6 = yyj6 > l
	} else {
		yyb6 = r.CheckBreak()
	}
	if yyb6 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd6482)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem6482)
	if r.TryDecodeAsNil() {
		x.Val = nil
	} else {
		yyv7 := &x.Val
		yym8 := z.DecBinary()
		_ = yym8
		if false {
		} else {
			*yyv7 = r.DecodeBytes(*(*[]byte)(yyv7), false, false)
		}
	}
	for {
		yyj6++
		if yyhl6 {
			yyb6 = yyj6 > l
		} else {
			yyb6 = r.CheckBreak()
		}
		if yyb6 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem6482)
		z.DecStructFieldNotFound(yyj6-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd6482)
}

func (x *PutReqeust) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer6482
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [4]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(4)
			} else {
				yynn2 = 4
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem6482)
				yym4 := z.EncBinary()
				_ = yym4
				if false {
				} else {
					r.EncodeUint(uint64(x.BucketID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey6482)
				r.EncodeString(codecSelferC_UTF86482, string("BucketID"))
				z.EncSendContainerState(codecSelfer_containerMapValue6482)
				yym5 := z.EncBinary()
				_ = yym5
				if false {
				} else {
					r.EncodeUint(uint64(x.BucketID))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem6482)
				yym7 := z.EncBinary()
				_ = yym7
				if false {
				} else {
					r.EncodeUint(uint64(x.ContextID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey6482)
				r.EncodeString(codecSelferC_UTF86482, string("ContextID"))
				z.EncSendContainerState(codecSelfer_containerMapValue6482)
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else {
					r.EncodeUint(uint64(x.ContextID))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem6482)
				if x.Key == nil {
					r.EncodeNil()
				} else {
					yym10 := z.EncBinary()
					_ = yym10
					if false {
					} else {
						r.EncodeStringBytes(codecSelferC_RAW6482, []byte(x.Key))
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey6482)
				r.EncodeString(codecSelferC_UTF86482, string("Key"))
				z.EncSendContainerState(codecSelfer_containerMapValue6482)
				if x.Key == nil {
					r.EncodeNil()
				} else {
					yym11 := z.EncBinary()
					_ = yym11
					if false {
					} else {
						r.EncodeStringBytes(codecSelferC_RAW6482, []byte(x.Key))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem6482)
				if x.Val == nil {
					r.EncodeNil()
				} else {
					yym13 := z.EncBinary()
					_ = yym13
					if false {
					} else {
						r.EncodeStringBytes(codecSelferC_RAW6482, []byte(x.Val))
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey6482)
				r.EncodeString(codecSelferC_UTF86482, string("Val"))
				z.EncSendContainerState(codecSelfer_containerMapValue6482)
				if x.Val == nil {
					r.EncodeNil()
				} else {
					yym14 := z.EncBinary()
					_ = yym14
					if false {
					} else {
						r.EncodeStringBytes(codecSelferC_RAW6482, []byte(x.Val))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd6482)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd6482)
			}
		}
	}
}

func (x *PutReqeust) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer6482
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap6482 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd6482)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray6482 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd6482)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr6482)
		}
	}
}

func (x *PutReqeust) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer6482
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey6482)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue6482)
		switch yys3 {
		case "BucketID":
			if r.TryDecodeAsNil() {
				x.BucketID = 0
			} else {
				yyv4 := &x.BucketID
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					*((*uint64)(yyv4)) = uint64(r.DecodeUint(64))
				}
			}
		case "ContextID":
			if r.TryDecodeAsNil() {
				x.ContextID = 0
			} else {
				yyv6 := &x.ContextID
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					*((*uint64)(yyv6)) = uint64(r.DecodeUint(64))
				}
			}
		case "Key":
			if r.TryDecodeAsNil() {
				x.Key = nil
			} else {
				yyv8 := &x.Key
				yym9 := z.DecBinary()
				_ = yym9
				if false {
				} else {
					*yyv8 = r.DecodeBytes(*(*[]byte)(yyv8), false, false)
				}
			}
		case "Val":
			if r.TryDecodeAsNil() {
				x.Val = nil
			} else {
				yyv10 := &x.Val
				yym11 := z.DecBinary()
				_ = yym11
				if false {
				} else {
					*yyv10 = r.DecodeBytes(*(*[]byte)(yyv10), false, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd6482)
}

func (x *PutReqeust) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer6482
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj12 int
	var yyb12 bool
	var yyhl12 bool = l >= 0
	yyj12++
	if yyhl12 {
		yyb12 = yyj12 > l
	} else {
		yyb12 = r.CheckBreak()
	}
	if yyb12 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd6482)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem6482)
	if r.TryDecodeAsNil() {
		x.BucketID = 0
	} else {
		yyv13 := &x.BucketID
		yym14 := z.DecBinary()
		_ = yym14
		if false {
		} else {
			*((*uint64)(yyv13)) = uint64(r.DecodeUint(64))
		}
	}
	yyj12++
	if yyhl12 {
		yyb12 = yyj12 > l
	} else {
		yyb12 = r.CheckBreak()
	}
	if yyb12 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd6482)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem6482)
	if r.TryDecodeAsNil() {
		x.ContextID = 0
	} else {
		yyv15 := &x.ContextID
		yym16 := z.DecBinary()
		_ = yym16
		if false {
		} else {
			*((*uint64)(yyv15)) = uint64(r.DecodeUint(64))
		}
	}
	yyj12++
	if yyhl12 {
		yyb12 = yyj12 > l
	} else {
		yyb12 = r.CheckBreak()
	}
	if yyb12 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd6482)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem6482)
	if r.TryDecodeAsNil() {
		x.Key = nil
	} else {
		yyv17 := &x.Key
		yym18 := z.DecBinary()
		_ = yym18
		if false {
		} else {
			*yyv17 = r.DecodeBytes(*(*[]byte)(yyv17), false, false)
		}
	}
	yyj12++
	if yyhl12 {
		yyb12 = yyj12 > l
	} else {
		yyb12 = r.CheckBreak()
	}
	if yyb12 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd6482)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem6482)
	if r.TryDecodeAsNil() {
		x.Val = nil
	} else {
		yyv19 := &x.Val
		yym20 := z.DecBinary()
		_ = yym20
		if false {
		} else {
			*yyv19 = r.DecodeBytes(*(*[]byte)(yyv19), false, false)
		}
	}
	for {
		yyj12++
		if yyhl12 {
			yyb12 = yyj12 > l
		} else {
			yyb12 = r.CheckBreak()
		}
		if yyb12 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem6482)
		z.DecStructFieldNotFound(yyj12-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd6482)
}

func (x *PutResponse) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer6482
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [0]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(0)
			} else {
				yynn2 = 0
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd6482)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd6482)
			}
		}
	}
}

func (x *PutResponse) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer6482
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap6482 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd6482)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray6482 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd6482)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr6482)
		}
	}
}

func (x *PutResponse) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer6482
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey6482)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3 := string(yys3Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue6482)
		switch yys3 {
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd6482)
}

func (x *PutResponse) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer6482
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4 int
	var yyb4 bool
	var yyhl4 bool = l >= 0
	for {
		yyj4++
		if yyhl4 {
			yyb4 = yyj4 > l
		} else {
			yyb4 = r.CheckBreak()
		}
		if yyb4 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem6482)
		z.DecStructFieldNotFound(yyj4-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd6482)
}
